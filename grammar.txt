I went through the RNG file (via XSLT and then a bunch of search/replace) and came up with a EBNF grammar for to help understand CNXML.

I relaxed the RNG rules in 2 ways:

1) I ignored attributes (see "Attributes" for ideas on converting/ignoring them)
2) I ignored the ancestor of an element (Context-Sensitive vs Context-Free grammar)

After looking through the attributes I found that by-and-large most of them can be expressed as one of the following:
- as HTML elements (list/@type="bulleted" vs list/@type="enumerated" with how it should be numbered, what the start number is via ol/@type="3")
- as classes (note/@type="warning" or "tip")
- as directives for how to collate at the end of a chapter (@print-placement="end")

I found that ancestry (block/inline) only:
- Defines which elements can be children (but that's already close to what HTML elements can be inserted as inline)
- Affects whether you can put a label/caption (not title) in an element

Also, there were a couple of elements (like list, note) that can be inline or block (see below)


In sum, here's my report.
I took several hundred lines of "scary" RNG and distilled it into 23+13 lines of rules (ignoring media, tables, and mdml)
Sorry about the names of some of the "pseudo" rules (those in {CAPS} ):
- I noticed there were a lot of commonalities among elements and tried to give those commonalities a name.


===========================================
All the Elements: Rules in EBNF ( http://www.w3.org/TR/REC-xml/#sec-notation )
===========================================

// Meta-rules (containers for common rules)
START:	[ document ]
{LABEL_TITLE}:	( label )?( title )?

{BLOCKISH}:	quote  preformat  list                      # these can be block or inline elements (depending on context)
{STRICTLY_INLINE}:	emphasis  term  foreign  cite  span  sup  sub  code
{INLINE}:	{STRICTLY_INLINE}  {BLOCKISH}                 # These are inline elements plus elements that appear both as blocks and inline
{ANY_INLINE}:	{INLINE} cite-title  note  media  footnote  link  newline  space
{ONLY_STRICTLY_INLINE}:	([ {STRICTLY_INLINE} ])+
{ONLY_INLINE}:	([ {INLINE} ])+
{ONLY_ANY_INLINE}:	([ {ANY_INLINE} ])*
{PARA_INLINE_BLOCK}:	([ para  {ANY_INLINE}  {BLOCK} ]) # These are a choice: either the child is a block (or a para), or an unwrapped para ({ANY_INLINE})

{BLOCK}:	{BLOCKISH}  div  definition  example  figure  code  note  media  table  rule  equation  exercise
{ANY_BLOCK}:	([ section  {BLOCK}  para ])+             # block elements plus the loosest element, section (basically, anything goes!)
{TITLE_BLOCK}:	{LABEL_TITLE}{ANY_BLOCK}                # Same as above but the element can have a title/label

{MEDIA_TEXT}:	([ longdesc ])?( param )*([ {STRICTLY_INLINE} cite-title  preformat  quote  note  list  object  image  audio  video  java-applet  flash  labview  text  download ])*

--------------------------------------
Rules that apply to several elements:
--------------------------------------

quote, note, item:	                ( label )?{ONLY_ANY_INLINE}
div, preformat, footnote, meaning:	( title )?{PARA_INLINE_BLOCK}+
quote, note, commentary:	          {LABEL_TITLE}{PARA_INLINE_BLOCK}+
quote, preformat:	                  ([ para {ONLY_INLINE}])+
item, para:	                        {ONLY_INLINE}
term, foreign, cite, span, sup, sub, code:	{ONLY_STRICTLY_INLINE}
section, example, problem, solution, statement, proof:	{TITLE_BLOCK}
preformat, title, label, span, cite, cite-title, link, emphasis, term, sub, sup, foreign, caption:	{ONLY_ANY_INLINE}

----------------------------------------
Rules that only apply to only 1 element
----------------------------------------

emphasis:	{ONLY_STRICTLY_INLINE}
glossary:	( definition )+
definition:	( label )? term [ seealso ( meaning ( example )*)+( seealso )?]
seealso:	( label )?( term )+
list:	( item )+
list:	{LABEL_TITLE}( item )+
rule:	{LABEL_TITLE}( statement )+([ proof  example ])*
exercise:	[{LABEL_TITLE} problem ( solution )*( commentary )? item ]
figure:	{LABEL_TITLE}[ media  table  code  ( subfigure )+]( caption )?
subfigure:	{LABEL_TITLE}[ media  table  code ]( caption )?

item:	( label )?{PARA_INLINE_BLOCK}*
para:	( title )?([ {ANY_INLINE}  {BLOCK} ])+      # Almost a {PARA_INLINE_BLOCK}+ except that nesting para's are not allowed
code:	([ {ANY_INLINE} ])+
code:	{LABEL_TITLE}([ {ANY_INLINE} ])+( caption )?
equation:	{LABEL_TITLE}[ media ]

------------------------
 Other Rules in CNXML
------------------------

// Media
media:	([ longdesc ])?([ object  image  audio  video  java-applet  flash  labview  text  download ])+
longdesc:	( title )?{PARA_INLINE_BLOCK}+
object:	{MEDIA_TEXT}
image:	{MEDIA_TEXT}
audio:	{MEDIA_TEXT}
video:	{MEDIA_TEXT}
java-applet:	{MEDIA_TEXT}
flash:	{MEDIA_TEXT}
labview:	{MEDIA_TEXT}
text:	([ longdesc ])?( param )*{PARA_INLINE_BLOCK}+
download:	{MEDIA_TEXT}

// Tables
table:	{LABEL_TITLE}( tgroup )+( caption )?
tgroup:	( colspec )*( spanspec )*( thead )?( tfoot )? tbody 
thead:	( colspec )*( row )+
tfoot:	( colspec )*( row )+
tbody:	( row )+
row:	([ entry  entrytbl ])+
entrytbl:	( colspec )*( spanspec )*( thead )? tbody 
entry:	{PARA_INLINE_BLOCK}*

// MDML
document:	 title ( metadata )?( featured-links )? content ( glossary )?
content:	[{ANY_BLOCK} problemset ]
md:actors:	([ md:person  md:organization ])+
md:person:	( md:honorific )? md:firstname ( md:othername )? md:surname ( md:lineage )? md:fullname ( md:email )?( md:homepage )?
md:organization:	 md:fullname  md:shortname ( md:email )?( md:homepage )?
md:roles:	( md:role )+
md:extended-attribution:	( link-group )+
md:keywordlist:	( md:keyword )+
md:subjectlist:	( md:subject )+
md:education-levellist:	( md:education-level )+
md:derived-from:	( md:derived-from )*
md:abstract:	([ para {ONLY_INLINE}])+
metadata:	 md:content-id  md:repository ( md:content-url )? md:title ( md:short-title )?( md:subtitle )? md:version  md:created  md:revised  md:actors  md:roles  md:license ( md:extended-attribution )?( md:derived-from )*( md:keywordlist )?( md:subjectlist )?( md:education-levellist )?( md:abstract )? md:language ( md:objectives )?( md:homepage )?( md:institution )?( md:course-code )?( md:instructor )?
featured-links:	( link-group )+
link-group:	( label )?( link )+

// QuizML
problemset:	( item )+
item:	 question ( resource )*( answer )*( hint )*( feedback )?( key )?
answer:	( response )?( feedback ( feedback )?)?
question:	([ section  media ])*
response:	([ section  media ])*
feedback:	([ section  media ])*
hint:	([ section  media ])*
key:	([ section  media ])*


-----------------------------
The CNXML Rules Expanded out
-----------------------------

emphasis:	{ONLY_STRICTLY_INLINE}
term:	{ONLY_STRICTLY_INLINE}
foreign:	{ONLY_STRICTLY_INLINE}
cite:	{ONLY_STRICTLY_INLINE}
span:	{ONLY_STRICTLY_INLINE}
sup:	{ONLY_STRICTLY_INLINE}
sub:	{ONLY_STRICTLY_INLINE}
code:	{ONLY_STRICTLY_INLINE}
list:	( item )+
item:	{ONLY_INLINE}
para:	{ONLY_INLINE}
quote:	([ para {ONLY_INLINE}])+
preformat:	([ para {ONLY_INLINE}])+


section:	{TITLE_BLOCK}
div:	( title )?{PARA_INLINE_BLOCK}+
preformat:	( title )?{PARA_INLINE_BLOCK}+
preformat:	{ONLY_ANY_INLINE}
para:	( title )?([ {ANY_INLINE}  {BLOCK} ])+      # Almost a {PARA_INLINE_BLOCK}+ except that nesting para's are not allowed
title:	{ONLY_ANY_INLINE}
label:	{ONLY_ANY_INLINE}
span:	{ONLY_ANY_INLINE}
cite:	{ONLY_ANY_INLINE}
cite-title:	{ONLY_ANY_INLINE}
link:	{ONLY_ANY_INLINE}
emphasis:	{ONLY_ANY_INLINE}
term:	{ONLY_ANY_INLINE}
sub:	{ONLY_ANY_INLINE}
sup:	{ONLY_ANY_INLINE}
foreign:	{ONLY_ANY_INLINE}
quote:	( label )?{ONLY_ANY_INLINE}
quote:	{LABEL_TITLE}{PARA_INLINE_BLOCK}+
footnote:	( title )?{PARA_INLINE_BLOCK}+
equation:	{LABEL_TITLE}[ media ]
note:	{LABEL_TITLE}{PARA_INLINE_BLOCK}+
note:	( label )?{ONLY_ANY_INLINE}
list:	{LABEL_TITLE}( item )+
item:	( label )?{PARA_INLINE_BLOCK}*
item:	( label )?{ONLY_ANY_INLINE}
code:	([ {ANY_INLINE} ])+
code:	{LABEL_TITLE}([ {ANY_INLINE} ])+( caption )?
figure:	{LABEL_TITLE}[ media  table  code  ( subfigure )+]( caption )?
subfigure:	{LABEL_TITLE}[ media  table  code ]( caption )?
caption:	{ONLY_ANY_INLINE}

// Exercise, Example, Glossary, Rule
example:	{TITLE_BLOCK}
exercise:	[{LABEL_TITLE} problem ( solution )*( commentary )? item ]
problem:	{TITLE_BLOCK}
solution:	{TITLE_BLOCK}
commentary:	{LABEL_TITLE}{PARA_INLINE_BLOCK}+

glossary:	( definition )+
definition:	( label )? term [ seealso ( meaning ( example )*)+( seealso )?]
meaning:	( title )?{PARA_INLINE_BLOCK}+
seealso:	( label )?( term )+

rule:	{LABEL_TITLE}( statement )+([ proof  example ])*
statement:	{TITLE_BLOCK}
proof:	{TITLE_BLOCK}


============
 Attributes
============

@effect: bold, italics, underline, normal, smallcaps
@type: converted to a class and then implemented in the CSS

links are converted to:
<a href="{@document}/{@version}/{@resource}#{@target-id}"/> <!-- maybe resource is removed -->


Note @type: note, aside, tip, warning, important, footnote:  become classes on the note

-------
 Lists
-------

@list-type=bulleted -> <ul> (can be inline)
@list-type=enumerated -> <ol>
@list-type: labeled-item ?

@bullet-style: bullet, open-circle, pilcrow, rpilcrow, asterisk, dash, section, none  : all become @class and handled in CSS
@number-style: arabic, upper-alpha, lower-alpha, upper-roman, lower-roman             : all become @class
@mark-prefix: Needs to be handled in the _author_ CSS (or maybe a custom <style>.autogen-1 > li::before { content: "{@mark-prefix}"; }</style> )
@mark-suffix: same as @mark-prefix
@item-sep: Needs to be handled in the _author_ CSS. For block lists it's "" and for inline lists its ";" ( p li:not(:last-child)::after { content: ";"; } )
@start-value: converts to @type


---------------------
 Misc Attributes
---------------------
@lang: discarded, or maybe a @class
@alt: converts to @alt for img tags and @title for everything else
@longdesc: appended to the @alt
@print-width: discarded
@mime-type:
@for: online, pdf

@thumbnail
@codebase
@code
@archive
@name
@wmode: window, opaque, transparent
@quality: low, autolow, autohigh, medium, high
@scale: default, noorder, exactfit
@bgcolor discarded
@flash-vars
@standby
@autoplay: false, true
@loop, @controller, @volume
@viname
@version(labview): 7.0, 8.0, 8.2
@pubtype(cite-elemetn): article, book, booklet, conference, inbook, incollection, inproceedings, manual, mastersthesis, misc, phdthesis, proceedings, techreport, unpublished
@type(link-group): prerequisite, example, supplemental
@type(rule): rule, theorem, lemma, corollary, law, proposition : These become CSS and have their own counters and modify the ::before

@print-placement: here, end : Needs to become a processing instruction.


---------
 Misc
---------

c:section can contain other sections or basic-blocks.
c:section/c:label|c:title get converted into a <section class="labeled"><header><h1 class="labeled"><span class="label">...</span><span>...</span></h1></header>
  - The @label attribute is so you can decide not to prefix the section with a number ( .section:not(.labeled)::before { content: ... )

c:glossary becomes a <dl>

c:para[c:title] becomes a div[@class="para" and h2]
c:newline/c:space becomes a br (or div[span] or span with @class="newline" and  border-bottom width=#em)
